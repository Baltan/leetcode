package leetcode.algorithms;

/**
 * Description: 1981. Minimize the Difference Between Target and Chosen Elements
 *
 * @author Baltan
 * @date 2023/1/27 12:51
 */
public class MinimizeTheDifference {
    public static void main(String[] args) {
        System.out.println(minimizeTheDifference(new int[][]{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 13));
        System.out.println(minimizeTheDifference(new int[][]{{1}, {2}, {3}}, 100));
        System.out.println(minimizeTheDifference(new int[][]{{1, 2, 9, 8, 7}}, 6));
        System.out.println(minimizeTheDifference(new int[][]{{24, 18, 31, 34, 31, 47, 47, 27, 32, 44, 19, 26, 15, 11, 32, 39, 17, 36, 28, 45, 44, 45, 6, 38, 47, 37, 7, 5, 23, 12, 35, 10, 27, 5, 6, 44, 42, 3, 9}, {19, 25, 15, 46, 43, 44, 22, 29, 12, 34, 19, 8, 10, 35, 49, 28, 7, 22, 34, 16, 46, 33, 17, 11, 11, 30, 46, 16, 26, 23, 49, 37, 47, 10, 30, 29, 47, 2, 39}, {25, 48, 12, 26, 33, 4, 31, 18, 26, 17, 46, 47, 27, 46, 42, 31, 24, 36, 22, 46, 48, 43, 6, 49, 47, 15, 35, 40, 13, 26, 43, 25, 41, 1, 21, 30, 34, 46, 30}, {42, 12, 7, 2, 26, 14, 47, 37, 39, 25, 14, 7, 25, 36, 50, 13, 18, 48, 38, 38, 13, 32, 40, 9, 1, 40, 44, 28, 31, 17, 33, 37, 12, 30, 46, 14, 49, 5, 23}, {1, 32, 35, 43, 43, 5, 49, 38, 32, 44, 22, 30, 18, 33, 30, 2, 6, 40, 49, 23, 12, 49, 49, 26, 17, 44, 41, 47, 9, 4, 11, 32, 25, 30, 44, 19, 10, 1, 19}, {36, 30, 1, 24, 3, 35, 25, 37, 29, 14, 44, 20, 32, 42, 9, 31, 45, 35, 46, 20, 5, 17, 21, 20, 22, 42, 20, 42, 42, 26, 34, 6, 33, 41, 14, 26, 39, 34, 10}, {33, 41, 6, 20, 3, 15, 30, 36, 15, 34, 18, 4, 8, 8, 44, 25, 24, 14, 21, 23, 5, 22, 30, 24, 11, 32, 29, 19, 30, 9, 46, 29, 41, 14, 18, 21, 11, 7, 16}, {31, 13, 49, 44, 24, 12, 23, 9, 9, 15, 18, 36, 41, 25, 26, 48, 22, 18, 47, 39, 33, 38, 45, 47, 21, 48, 26, 49, 46, 46, 41, 49, 46, 19, 35, 40, 41, 43, 5}, {24, 20, 26, 31, 12, 17, 23, 29, 31, 6, 12, 21, 25, 9, 2, 7, 23, 11, 23, 5, 47, 49, 42, 28, 1, 35, 21, 16, 39, 25, 35, 19, 31, 41, 10, 24, 21, 13, 32}, {7, 10, 14, 22, 17, 10, 27, 24, 17, 6, 22, 13, 16, 46, 16, 47, 40, 3, 22, 24, 42, 50, 40, 4, 10, 12, 5, 28, 29, 50, 18, 9, 21, 34, 37, 8, 22, 42, 50}, {46, 40, 26, 15, 4, 26, 50, 31, 32, 40, 21, 35, 40, 39, 6, 38, 33, 35, 43, 32, 26, 45, 30, 11, 27, 25, 34, 29, 3, 7, 29, 38, 9, 8, 44, 33, 12, 5, 26}, {20, 30, 46, 1, 17, 7, 43, 23, 15, 12, 2, 10, 28, 43, 6, 22, 42, 30, 4, 31, 16, 5, 31, 9, 36, 2, 9, 45, 33, 35, 4, 4, 13, 35, 1, 34, 22, 44, 34}, {16, 9, 24, 32, 1, 9, 35, 8, 16, 7, 30, 14, 4, 40, 14, 41, 25, 22, 40, 42, 26, 46, 34, 33, 50, 44, 11, 33, 7, 10, 41, 14, 12, 25, 13, 20, 22, 28, 10}, {28, 9, 26, 21, 20, 7, 36, 7, 31, 18, 19, 34, 49, 32, 18, 15, 27, 45, 9, 45, 36, 43, 7, 2, 39, 36, 49, 13, 14, 13, 26, 38, 3, 42, 9, 41, 2, 48, 17}, {45, 47, 31, 35, 4, 48, 50, 15, 10, 39, 21, 3, 45, 13, 7, 9, 41, 45, 35, 12, 49, 6, 44, 30, 41, 19, 14, 11, 21, 45, 18, 34, 37, 5, 27, 27, 43, 47, 3}, {30, 20, 43, 8, 41, 45, 47, 18, 2, 14, 27, 22, 17, 35, 47, 26, 38, 34, 48, 13, 28, 50, 9, 45, 11, 29, 30, 23, 25, 31, 40, 17, 40, 13, 38, 31, 29, 13, 49}, {31, 37, 22, 20, 5, 11, 24, 39, 41, 31, 15, 50, 40, 42, 43, 37, 9, 44, 20, 14, 35, 20, 7, 1, 2, 13, 21, 4, 21, 35, 17, 47, 43, 22, 29, 5, 27, 31, 46}, {2, 19, 38, 37, 9, 14, 10, 11, 39, 50, 25, 47, 5, 41, 38, 29, 18, 42, 6, 32, 31, 16, 10, 37, 20, 15, 13, 40, 46, 22, 38, 40, 45, 26, 34, 27, 16, 42, 14}, {36, 4, 17, 43, 16, 9, 40, 47, 26, 28, 8, 30, 26, 26, 31, 25, 19, 14, 16, 15, 4, 35, 34, 6, 39, 35, 44, 1, 4, 25, 46, 28, 26, 15, 33, 18, 7, 24, 33}, {24, 34, 32, 38, 5, 46, 30, 48, 45, 15, 18, 2, 2, 31, 3, 9, 42, 10, 14, 21, 16, 35, 4, 40, 10, 42, 19, 49, 7, 42, 36, 35, 6, 44, 43, 9, 28, 46, 9}, {3, 20, 33, 43, 18, 31, 4, 36, 23, 49, 22, 44, 7, 39, 24, 7, 39, 23, 24, 41, 18, 31, 19, 33, 39, 10, 2, 3, 22, 28, 41, 1, 23, 44, 35, 46, 4, 43, 5}, {45, 35, 33, 40, 50, 28, 28, 27, 16, 12, 11, 40, 3, 2, 38, 49, 47, 23, 44, 12, 19, 2, 3, 16, 37, 15, 26, 5, 24, 8, 39, 5, 16, 15, 36, 13, 7, 1, 45}, {26, 6, 33, 18, 38, 42, 15, 4, 34, 34, 34, 26, 28, 9, 10, 28, 9, 30, 48, 24, 4, 37, 12, 34, 29, 28, 39, 42, 29, 11, 32, 39, 9, 23, 10, 2, 17, 46, 12}, {10, 41, 27, 37, 41, 17, 29, 31, 30, 13, 28, 28, 18, 50, 15, 23, 49, 41, 3, 26, 40, 2, 28, 20, 2, 36, 31, 37, 17, 44, 18, 16, 30, 46, 30, 24, 34, 40, 30}, {43, 16, 36, 35, 11, 30, 19, 49, 24, 27, 8, 33, 44, 16, 48, 42, 43, 25, 8, 28, 39, 30, 40, 34, 30, 6, 48, 25, 29, 40, 50, 46, 45, 48, 24, 36, 23, 11, 10}, {15, 43, 42, 12, 27, 29, 32, 46, 47, 12, 27, 17, 21, 37, 26, 20, 42, 46, 17, 43, 21, 43, 1, 26, 38, 3, 14, 30, 7, 8, 1, 24, 21, 39, 21, 47, 26, 12, 48}, {21, 6, 34, 39, 31, 26, 40, 16, 29, 7, 39, 2, 23, 2, 20, 32, 9, 46, 46, 4, 1, 22, 26, 31, 42, 40, 1, 31, 41, 37, 14, 15, 48, 40, 21, 11, 22, 20, 50}, {26, 37, 39, 47, 32, 30, 49, 18, 6, 33, 14, 37, 24, 16, 24, 24, 12, 16, 35, 42, 47, 40, 15, 14, 38, 30, 16, 26, 18, 38, 14, 33, 11, 1, 26, 50, 31, 48, 24}, {42, 12, 44, 13, 47, 45, 39, 12, 32, 40, 1, 47, 9, 14, 46, 14, 1, 40, 6, 30, 50, 41, 13, 48, 12, 18, 26, 40, 2, 1, 24, 8, 20, 3, 37, 24, 31, 25, 8}, {5, 30, 12, 10, 50, 30, 42, 5, 18, 10, 31, 35, 5, 34, 46, 19, 19, 2, 36, 36, 14, 5, 27, 9, 12, 38, 20, 30, 13, 3, 45, 22, 30, 4, 10, 15, 40, 23, 41}, {20, 45, 42, 7, 13, 10, 15, 2, 21, 8, 18, 7, 24, 50, 5, 33, 46, 40, 9, 23, 9, 28, 47, 48, 13, 20, 36, 49, 2, 49, 2, 22, 41, 10, 47, 5, 35, 49, 4}, {9, 48, 32, 27, 44, 23, 31, 43, 19, 20, 5, 41, 10, 48, 8, 1, 6, 10, 23, 46, 10, 20, 50, 37, 44, 35, 9, 6, 15, 37, 47, 50, 48, 15, 22, 6, 12, 43, 28}}, 145));
    }

    /**
     * 参考：<a href="https://leetcode.cn/problems/minimize-the-difference-between-target-and-chosen-elements/solutions/951927/zui-xiao-hua-mu-biao-zhi-yu-suo-xuan-yua-mlym/"></a>
     *
     * @param mat
     * @param target
     * @return
     */
    public static int minimizeTheDifference(int[][] mat, int target) {
        int result = Integer.MAX_VALUE;
        int rows = mat.length;
        int cols = mat[0].length;
        /**
         * 根据题意rows∈[1,70]，mat[i][j]∈[1,70]，所以所有选中的数字之和最大可能为4900
         */
        int maxSum = 70 * 70;
        /**
         * dp[i][j]表示选择了第i行后，能否使得已选择的数字之和为j
         */
        boolean[][] dp = new boolean[rows][maxSum + 1];
        /**
         * 初始化只选择矩阵mat的第0行数字的情况
         */
        for (int i = 0; i < cols; i++) {
            int num = mat[0][i];
            dp[0][num] = true;
        }

        for (int i = 1; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                int num = mat[i][j];

                for (int k = 0; k <= maxSum; k++) {
                    /**
                     * 如果选择矩阵mat的前i行的数字之和可以为k，则选择第i行第j个数字后，可以令数字之和为k+num
                     */
                    if (dp[i - 1][k]) {
                        dp[i][k + num] = true;
                    }
                }
            }
        }
        /**
         * 选择rows个数字后，选择与target绝对差最小的一种情况
         */
        for (int i = 0; i < maxSum; i++) {
            if (dp[rows - 1][i]) {
                result = Math.min(result, Math.abs(i - target));
            }
        }
        return result;
    }
}
