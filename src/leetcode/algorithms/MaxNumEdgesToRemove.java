package leetcode.algorithms;

import java.util.ArrayList;
import java.util.List;

/**
 * Description: 1579. Remove Max Number of Edges to Keep Graph Fully Traversable
 *
 * @author Baltan
 * @date 2023/7/19 23:00
 */
public class MaxNumEdgesToRemove {
    public static void main(String[] args) {
        int[][] edges1 = {{3, 1, 2}, {3, 2, 3}, {1, 1, 3}, {1, 2, 4}, {1, 1, 2}, {2, 3, 4}};
        System.out.println(maxNumEdgesToRemove(4, edges1));

        int[][] edges2 = {{3, 1, 2}, {3, 2, 3}, {1, 1, 4}, {2, 1, 4}};
        System.out.println(maxNumEdgesToRemove(4, edges2));

        int[][] edges3 = {{3, 2, 3}, {1, 1, 2}, {2, 3, 4}};
        System.out.println(maxNumEdgesToRemove(4, edges3));

        int[][] edges4 = {{3, 32, 33}, {3, 31, 32}, {3, 30, 31}, {3, 29, 30}, {3, 28, 29}, {3, 27, 28}, {3, 26, 27}, {3, 25, 26}, {3, 24, 25}, {3, 23, 24}, {3, 22, 23}, {3, 21, 22}, {3, 20, 21}, {3, 19, 20}, {3, 18, 19}, {3, 17, 18}, {3, 16, 17}, {3, 15, 16}, {3, 14, 15}, {3, 13, 14}, {3, 12, 13}, {3, 11, 12}, {3, 10, 11}, {3, 9, 10}, {3, 8, 9}, {3, 7, 8}, {3, 6, 7}, {3, 5, 6}, {3, 4, 5}, {3, 3, 4}, {3, 2, 3}, {3, 1, 2}, {1, 33, 34}, {1, 33, 35}, {1, 33, 36}, {1, 33, 37}, {1, 33, 38}, {1, 33, 39}, {1, 33, 40}, {1, 33, 41}, {1, 33, 42}, {1, 33, 43}, {1, 33, 44}, {1, 33, 45}, {1, 33, 46}, {1, 33, 47}, {1, 33, 48}, {1, 33, 49}, {1, 33, 50}, {1, 33, 51}, {1, 33, 52}, {1, 33, 53}, {1, 33, 54}, {1, 33, 55}, {1, 33, 56}, {1, 33, 57}, {1, 33, 58}, {1, 33, 59}, {1, 33, 60}, {1, 33, 61}, {1, 33, 62}, {1, 33, 63}, {1, 33, 64}, {1, 33, 65}, {1, 33, 66}, {2, 33, 34}, {2, 33, 35}, {2, 33, 36}, {2, 33, 37}, {2, 33, 38}, {2, 33, 39}, {2, 33, 40}, {2, 33, 41}, {2, 33, 42}, {2, 33, 43}, {2, 33, 44}, {2, 33, 45}, {2, 33, 46}, {2, 33, 47}, {2, 33, 48}, {2, 33, 49}, {2, 33, 50}, {2, 33, 51}, {2, 33, 52}, {2, 33, 53}, {2, 33, 54}, {2, 33, 55}, {2, 33, 56}, {2, 33, 57}, {2, 33, 58}, {2, 33, 59}, {2, 33, 60}, {2, 33, 61}, {2, 33, 62}, {2, 33, 63}, {2, 33, 64}, {2, 33, 65}, {2, 33, 66}};
        System.out.println(maxNumEdgesToRemove(66, edges4));

        int[][] edges5 = {{2, 1, 2}, {1, 1, 3}, {1, 2, 4}, {2, 3, 5}, {1, 1, 6}, {1, 3, 7}, {2, 6, 8}, {1, 5, 9}, {3, 5, 10}, {2, 9, 11}, {2, 4, 12}, {1, 11, 13}, {2, 13, 14}, {1, 10, 15}, {1, 4, 16}, {3, 2, 17}, {3, 13, 18}, {3, 14, 19}, {2, 13, 20}, {3, 9, 21}, {2, 10, 22}, {2, 19, 23}, {1, 21, 24}, {1, 7, 25}, {3, 6, 26}, {2, 9, 27}, {1, 16, 28}, {3, 20, 29}, {1, 24, 28}, {1, 10, 17}, {1, 13, 21}, {2, 12, 13}, {1, 1, 10}, {1, 20, 28}, {1, 13, 14}, {2, 6, 22}, {2, 24, 26}, {3, 1, 20}, {2, 11, 27}, {1, 23, 28}, {1, 15, 25}, {2, 7, 22}, {3, 15, 27}, {3, 3, 7}, {1, 5, 15}, {2, 4, 28}, {3, 7, 28}, {2, 7, 17}, {2, 8, 20}, {3, 7, 29}, {3, 2, 24}, {2, 1, 3}, {1, 1, 11}, {2, 9, 21}, {3, 4, 11}, {2, 6, 19}, {1, 7, 18}, {3, 8, 29}, {2, 10, 15}, {2, 13, 24}, {3, 6, 29}, {3, 8, 10}, {1, 2, 28}, {2, 4, 21}, {2, 10, 24}, {2, 7, 27}, {1, 4, 14}, {3, 9, 19}, {3, 5, 14}, {1, 7, 15}, {2, 7, 19}, {2, 6, 9}, {1, 1, 15}, {3, 6, 8}, {2, 18, 23}, {1, 19, 28}, {3, 4, 23}, {2, 15, 20}, {3, 22, 28}, {3, 9, 11}, {3, 13, 27}, {1, 18, 23}, {1, 8, 20}, {3, 7, 23}, {3, 18, 29}, {3, 10, 15}, {2, 1, 6}, {1, 7, 20}, {1, 4, 9}, {1, 4, 28}, {2, 3, 25}, {1, 11, 15}, {1, 17, 24}, {2, 5, 9}, {3, 14, 17}, {1, 4, 24}, {2, 7, 12}, {3, 1, 28}, {2, 18, 22}, {1, 17, 27}, {1, 5, 13}, {1, 9, 14}, {2, 5, 10}, {1, 19, 29}, {2, 1, 14}, {1, 27, 28}, {1, 10, 27}, {2, 7, 16}, {1, 1, 25}, {1, 22, 26}, {3, 8, 20}, {2, 7, 21}, {2, 3, 8}, {2, 15, 26}, {1, 23, 29}, {2, 2, 27}, {2, 15, 19}, {3, 23, 27}, {1, 8, 12}, {1, 13, 28}, {2, 1, 18}, {1, 18, 26}, {1, 3, 21}, {1, 12, 21}, {1, 3, 19}, {3, 16, 22}, {3, 13, 21}, {2, 1, 11}, {3, 12, 29}, {1, 18, 21}, {1, 4, 27}, {1, 7, 19}, {3, 9, 18}, {1, 5, 16}, {3, 1, 5}, {1, 1, 2}, {2, 16, 25}, {3, 5, 18}, {1, 16, 22}, {1, 24, 27}, {1, 16, 26}, {1, 8, 27}, {2, 4, 19}, {1, 23, 26}, {2, 5, 23}, {2, 7, 14}, {2, 7, 28}, {3, 11, 26}, {1, 14, 22}, {1, 9, 29}, {3, 24, 25}, {3, 23, 25}, {3, 5, 24}, {1, 8, 22}, {1, 2, 25}, {2, 5, 19}, {1, 11, 12}, {3, 12, 13}, {3, 9, 28}, {3, 15, 24}, {3, 15, 17}, {1, 2, 22}, {1, 21, 23}, {3, 13, 20}, {2, 20, 28}, {1, 1, 20}, {3, 15, 22}, {2, 10, 20}, {1, 16, 25}, {3, 4, 13}, {3, 7, 11}, {3, 12, 19}, {1, 5, 11}, {1, 7, 24}, {3, 11, 14}, {1, 20, 26}, {2, 11, 13}, {3, 18, 27}, {2, 17, 25}, {1, 6, 27}, {3, 16, 27}, {3, 8, 24}, {1, 4, 13}, {2, 15, 25}, {2, 4, 17}, {3, 19, 24}, {2, 19, 26}, {1, 23, 25}, {3, 9, 25}, {2, 19, 21}, {3, 14, 24}, {1, 5, 25}, {1, 17, 25}, {2, 12, 19}, {3, 8, 25}, {1, 14, 15}, {3, 14, 15}, {3, 18, 19}, {3, 11, 22}, {1, 12, 19}, {1, 17, 20}, {3, 6, 18}, {1, 7, 23}, {3, 10, 28}, {2, 2, 4}, {2, 14, 24}, {2, 6, 23}, {2, 7, 11}, {2, 15, 21}, {1, 8, 29}, {1, 9, 17}, {2, 26, 29}, {3, 5, 17}, {2, 6, 15}, {1, 17, 22}, {2, 3, 23}, {1, 1, 27}, {2, 8, 15}, {2, 1, 19}, {1, 1, 23}, {2, 17, 24}, {1, 9, 20}, {3, 22, 25}, {3, 5, 12}, {2, 7, 15}, {2, 3, 13}, {2, 3, 19}, {1, 7, 28}, {2, 14, 15}, {3, 6, 25}, {2, 16, 18}, {2, 4, 29}, {3, 4, 29}, {2, 2, 28}, {1, 8, 11}, {2, 22, 26}, {3, 14, 25}, {1, 17, 21}, {3, 1, 16}, {3, 10, 25}, {1, 7, 21}, {2, 7, 29}, {2, 1, 4}, {3, 1, 14}, {2, 5, 20}, {3, 22, 29}, {1, 9, 13}, {2, 14, 17}, {1, 10, 20}, {3, 2, 18}, {1, 5, 10}, {3, 5, 21}, {1, 15, 27}, {3, 6, 19}, {2, 11, 21}, {3, 4, 7}, {3, 22, 24}, {3, 20, 28}, {3, 12, 20}, {2, 9, 17}, {3, 7, 8}, {2, 15, 24}, {1, 14, 28}, {1, 1, 16}, {3, 19, 25}, {2, 2, 5}, {3, 14, 16}, {2, 19, 22}, {2, 8, 11}, {1, 21, 28}, {1, 2, 24}, {3, 2, 20}, {2, 11, 25}, {1, 5, 23}, {2, 10, 29}, {3, 6, 24}, {1, 14, 29}, {3, 4, 25}, {2, 28, 29}, {2, 3, 29}, {1, 13, 23}, {3, 7, 9}, {2, 2, 15}, {1, 21, 25}, {3, 1, 13}, {2, 11, 15}, {2, 10, 26}, {2, 4, 6}, {1, 4, 23}, {1, 9, 22}, {1, 8, 19}, {2, 20, 25}, {1, 21, 27}, {1, 20, 21}, {2, 2, 13}, {1, 11, 20}, {1, 22, 25}, {2, 5, 17}, {2, 2, 29}, {3, 19, 21}, {1, 25, 28}, {2, 10, 28}, {1, 13, 19}, {2, 16, 23}, {2, 8, 16}, {3, 6, 13}, {3, 3, 4}, {1, 15, 26}, {1, 13, 18}, {1, 3, 9}, {2, 19, 25}, {1, 4, 29}, {2, 1, 20}, {1, 9, 12}, {2, 10, 16}, {3, 6, 11}, {3, 8, 9}, {3, 6, 14}, {3, 2, 22}, {1, 4, 22}, {3, 5, 8}, {3, 11, 25}, {3, 16, 26}, {1, 19, 25}, {1, 2, 12}, {1, 5, 21}, {1, 16, 17}, {1, 18, 27}, {1, 3, 8}, {1, 10, 16}, {3, 16, 25}, {2, 5, 24}, {3, 15, 29}, {1, 9, 11}, {3, 1, 7}, {1, 2, 3}, {3, 5, 27}, {1, 16, 21}, {3, 13, 25}, {3, 2, 16}, {1, 25, 26}, {1, 6, 7}, {1, 15, 20}, {2, 4, 18}, {3, 2, 28}, {1, 20, 29}, {2, 3, 27}, {1, 10, 23}, {1, 23, 27}, {2, 3, 11}, {1, 3, 5}, {1, 26, 28}, {1, 8, 18}, {1, 9, 23}, {2, 3, 18}, {2, 5, 7}, {1, 16, 24}, {2, 6, 29}, {2, 23, 25}, {2, 3, 9}, {2, 6, 13}, {3, 27, 29}, {1, 1, 14}, {2, 3, 6}, {3, 8, 14}, {1, 1, 28}, {3, 1, 21}, {2, 1, 21}, {2, 6, 28}, {2, 10, 18}, {3, 9, 24}, {2, 14, 19}, {3, 20, 23}, {3, 11, 13}, {3, 1, 29}, {1, 4, 15}, {2, 17, 23}, {3, 19, 22}, {3, 14, 26}, {3, 13, 26}, {3, 4, 18}, {1, 7, 9}, {3, 8, 18}, {2, 9, 16}, {2, 2, 24}, {2, 18, 27}, {2, 11, 16}, {2, 7, 9}, {3, 12, 24}, {2, 6, 12}, {3, 4, 19}, {3, 11, 19}, {3, 3, 6}, {1, 1, 8}, {3, 2, 6}, {1, 13, 22}, {2, 20, 27}, {2, 25, 27}, {2, 5, 6}, {3, 23, 29}, {1, 17, 26}, {1, 10, 14}, {2, 2, 7}, {3, 3, 23}, {3, 23, 24}, {3, 2, 4}, {1, 24, 29}, {2, 4, 22}, {1, 3, 28}, {2, 4, 10}, {3, 2, 5}, {1, 18, 28}, {2, 7, 20}, {2, 10, 25}, {3, 15, 28}, {3, 16, 29}, {3, 3, 26}, {2, 7, 13}, {3, 7, 26}, {2, 12, 25}, {2, 4, 15}, {1, 13, 24}, {3, 6, 12}, {1, 2, 14}, {3, 5, 26}, {3, 14, 28}, {2, 5, 18}, {2, 18, 20}, {2, 9, 18}, {3, 19, 23}, {2, 6, 27}, {1, 3, 23}, {2, 1, 10}, {3, 18, 21}, {2, 3, 20}, {2, 11, 26}, {1, 6, 20}, {1, 20, 22}, {1, 11, 29}, {1, 1, 19}, {1, 5, 29}, {1, 26, 29}, {2, 7, 25}, {2, 1, 27}, {2, 3, 22}, {3, 2, 7}, {1, 5, 18}, {3, 24, 27}, {1, 15, 21}, {1, 19, 24}, {2, 2, 14}, {2, 9, 25}, {3, 5, 25}, {1, 8, 16}, {2, 12, 27}, {2, 6, 14}, {2, 5, 8}, {1, 5, 8}, {2, 24, 28}, {1, 8, 23}, {3, 11, 24}, {2, 9, 13}, {3, 2, 27}, {2, 22, 24}, {1, 18, 25}, {1, 7, 22}, {2, 2, 18}, {1, 7, 27}, {3, 6, 16}, {3, 1, 26}, {2, 4, 24}, {2, 9, 12}, {2, 16, 20}, {2, 8, 22}, {1, 2, 8}, {2, 16, 21}, {1, 7, 11}, {2, 25, 26}, {1, 14, 18}, {2, 3, 10}, {1, 15, 16}, {1, 10, 21}, {1, 1, 22}, {2, 10, 21}, {1, 4, 19}, {1, 6, 22}, {2, 13, 29}, {3, 14, 29}, {3, 3, 17}, {3, 7, 16}, {3, 12, 15}, {2, 17, 22}, {2, 5, 25}, {2, 1, 8}, {1, 22, 29}, {3, 2, 29}, {1, 3, 14}, {2, 2, 19}, {3, 1, 8}, {3, 1, 15}, {2, 11, 29}, {3, 23, 28}, {2, 3, 24}, {2, 17, 18}, {3, 17, 18}, {3, 26, 29}, {2, 12, 29}, {3, 4, 5}, {2, 24, 29}, {2, 10, 14}, {1, 14, 19}, {2, 12, 23}, {3, 3, 5}, {1, 12, 22}, {1, 15, 17}, {2, 4, 11}, {3, 21, 27}, {2, 17, 19}, {2, 3, 4}, {1, 20, 23}, {3, 9, 12}, {1, 2, 5}, {1, 15, 29}, {2, 1, 7}, {1, 3, 17}, {1, 3, 12}, {2, 17, 20}, {3, 10, 24}, {3, 2, 12}, {2, 9, 22}, {3, 21, 25}, {1, 6, 19}, {3, 3, 20}, {3, 9, 29}, {1, 12, 26}, {1, 2, 10}, {2, 21, 24}, {1, 10, 24}, {1, 6, 21}, {1, 8, 9}, {3, 19, 28}, {2, 3, 16}, {3, 4, 16}, {2, 5, 28}, {2, 6, 7}, {2, 12, 16}, {1, 11, 28}, {1, 1, 24}, {3, 27, 28}, {1, 9, 28}, {1, 21, 26}, {3, 22, 27}, {3, 11, 28}, {3, 18, 22}, {2, 19, 24}, {2, 2, 6}, {1, 2, 29}, {3, 15, 16}, {2, 5, 12}, {3, 11, 18}, {1, 12, 27}, {1, 14, 20}, {2, 19, 20}, {2, 17, 21}, {1, 8, 15}, {3, 14, 21}, {2, 1, 12}, {2, 16, 29}, {1, 6, 26}, {3, 14, 22}, {3, 26, 27}, {1, 13, 17}, {2, 4, 25}, {3, 10, 19}, {3, 17, 19}, {3, 1, 23}, {2, 9, 26}, {2, 13, 21}, {2, 13, 23}, {2, 12, 20}, {2, 20, 29}, {3, 21, 22}, {3, 1, 18}, {3, 15, 23}, {2, 13, 18}, {2, 26, 28}, {2, 7, 24}, {3, 2, 19}, {3, 13, 29}, {2, 12, 17}, {1, 10, 13}, {3, 1, 19}, {3, 20, 22}, {1, 12, 20}, {3, 4, 9}, {3, 9, 13}, {2, 4, 23}, {2, 21, 25}, {1, 4, 21}, {3, 7, 13}, {3, 3, 8}, {2, 6, 10}, {1, 12, 18}, {1, 25, 29}, {3, 21, 26}, {1, 8, 17}, {3, 16, 17}, {1, 7, 13}, {1, 2, 13}, {1, 12, 16}, {3, 6, 9}, {2, 13, 28}, {2, 13, 22}, {2, 14, 22}, {1, 11, 25}, {3, 1, 27}, {1, 19, 20}, {3, 23, 26}, {2, 22, 23}, {2, 15, 22}, {2, 6, 25}, {3, 11, 29}, {3, 3, 10}, {1, 2, 27}, {2, 14, 16}, {3, 26, 28}, {3, 3, 19}, {2, 2, 10}, {2, 17, 28}, {1, 2, 11}, {1, 3, 26}, {3, 5, 28}, {3, 15, 20}, {3, 19, 20}, {3, 7, 19}, {2, 23, 27}, {2, 6, 17}, {1, 7, 8}, {3, 16, 21}, {2, 14, 27}, {2, 8, 28}, {3, 15, 21}, {2, 8, 25}, {2, 3, 21}, {3, 10, 11}, {1, 3, 29}, {3, 17, 23}, {3, 19, 29}, {2, 18, 26}, {3, 18, 28}, {1, 6, 11}, {1, 10, 28}, {2, 9, 24}, {3, 2, 25}, {2, 11, 18}, {2, 2, 16}, {2, 13, 16}, {3, 6, 22}, {2, 12, 21}, {3, 20, 27}, {3, 10, 23}, {3, 1, 10}, {2, 6, 11}, {2, 9, 10}, {2, 10, 19}, {1, 15, 22}, {2, 14, 21}};
        System.out.println(maxNumEdgesToRemove(29, edges5));
    }

    /**
     * 参考：<a href="https://leetcode.cn/problems/remove-max-number-of-edges-to-keep-graph-fully-traversable/solutions/577816/bao-zheng-tu-ke-wan-quan-bian-li-by-leet-mtrw/"></a>
     *
     * @param n
     * @param edges
     * @return
     */
    public static int maxNumEdgesToRemove(int n, int[][] edges) {
        int result = 0;
        /**
         * parent[i]是节点i的父节点
         */
        int[] parent = new int[n + 1];
        /**
         * height[i]是以i作为根节点的多叉树的高度
         */
        int[] height = new int[n + 1];
        /**
         * 初始时，假设每一个节点都是独立的连通分量
         */
        int count = n;
        /**
         * 两人都能遍历的边
         */
        List<int[]> bothEdges = new ArrayList<>();
        /**
         * 只能由Bob遍历的边
         */
        List<int[]> bobEdges = new ArrayList<>();
        /**
         * 只能由Alice遍历的边
         */
        List<int[]> aliceEdges = new ArrayList<>();
        /**
         * 将三种类型的边归类
         */
        for (int[] edge : edges) {
            if (edge[0] == 1) {
                aliceEdges.add(edge);
            } else if (edge[0] == 2) {
                bobEdges.add(edge);
            } else {
                bothEdges.add(edge);
            }
        }

        for (int i = 1; i <= n; i++) {
            /**
             * 初始化每个节点的父节点都是自己
             */
            parent[i] = i;
            /**
             * 初始化每个节点都构成一个单节点的多叉树，树高为1
             */
            height[i] = 1;
        }

        for (int[] edge : bothEdges) {
            int x = edge[1];
            int y = edge[2];
            /**
             * 如果x所在集合和y所在集合不能合并，则说明x和y本来就在同一个集合中，可以删除edge边，否则通过合并两个集合可以减少一个连通分量
             */
            if (!union(parent, height, x, y)) {
                result++;
            } else {
                count--;
            }
        }
        /**
         * 令Alice继续向并查集中增加自己的边
         */
        int[] aliceParent = parent.clone();
        int[] aliceHeight = height.clone();
        /**
         * 对于Alice来说连通分量的个数
         */
        int aliceCount = count;

        for (int[] edge : aliceEdges) {
            int x = edge[1];
            int y = edge[2];
            /**
             * 如果x所在集合和y所在集合不能合并，则说明x和y本来就在同一个集合中，可以删除edge边，否则通过合并两个集合可以减少一个连通分量
             */
            if (!union(aliceParent, aliceHeight, x, y)) {
                result++;
            } else {
                aliceCount--;
            }
        }
        /**
         * Alice不能到达所有节点，返回-1
         */
        if (aliceCount > 1) {
            return -1;
        }
        /**
         * 令Bob继续向并查集中增加自己的边
         */
        int[] bobParent = parent.clone();
        int[] bobHeight = parent.clone();
        /**
         * 对于Bob来说连通分量的个数
         */
        int bobCount = count;

        for (int[] edge : bobEdges) {
            int x = edge[1];
            int y = edge[2];
            /**
             * 如果x所在集合和y所在集合不能合并，则说明x和y本来就在同一个集合中，可以删除edge边，否则通过合并两个集合可以减少一个连通分量
             */
            if (!union(bobParent, bobHeight, x, y)) {
                result++;
            } else {
                bobCount--;
            }
        }
        /**
         * Bob不能到达所有节点，返回-1
         */
        if (bobCount > 1) {
            return -1;
        }
        return result;
    }

    /**
     * 查找节点value的根节点
     *
     * @param parent
     * @param value
     * @return
     */
    public static int getRoot(int[] parent, int value) {
        /**
         * 只要节点value的父节点不是其自身，就继续向上查找父节点，直到查找到根节点为止
         */
        while (parent[value] != value) {
            value = parent[value];
        }
        return value;
    }

    /**
     * 能否将x所在的集合和y所在的集合合并，如果不能合并，说明x和y本来就在就在同一个集合中，此时连
     * 接x和y就构成了一个环
     *
     * @param parent
     * @param height
     * @param x
     * @param y
     * @return
     */
    public static boolean union(int[] parent, int[] height, int x, int y) {
        int xRoot = getRoot(parent, x);
        int yRoot = getRoot(parent, y);
        /**
         * 如果需要将两棵多叉树合并到一起构成一棵大的多叉树，总是将矮多叉树的根节点作为高多叉树的根节点的子节点
         */
        if (xRoot != yRoot) {
            if (height[xRoot] >= height[yRoot]) {
                parent[yRoot] = xRoot;
                height[xRoot] = Math.max(height[xRoot], 1 + height[yRoot]);
            } else {
                parent[xRoot] = yRoot;
                height[yRoot] = Math.max(height[yRoot], 1 + height[xRoot]);
            }
            return true;
        }
        return false;
    }
}
