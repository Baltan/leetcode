package leetcode.algorithms;

/**
 * Description: 2522. Partition String Into Substrings With Values at Most K
 *
 * @author Baltan
 * @date 2023/1/2 12:51
 */
public class MinimumPartition {
    public static void main(String[] args) {
        System.out.println(minimumPartition("165462", 60));
        System.out.println(minimumPartition("238182", 5));
        System.out.println(minimumPartition
    }

    public static int minimumPartition(String s, int k) {
        /**
         * 需要将字符串s的最后一个子串也进行计数，初始化1就代表最后一个子串
         */
        int result = 1;
        char[] charArray = s.toCharArray();
        /**
         * 当前子串代表的数值，定义为长整形，防止计算子串代表的数值时发生整型溢出
         */
        long value = 0L;

        for (char c : charArray) {
            int digit = c - '0';
            /**
             * 如果当前字符代表的数值大于k，则不管在这个字符前后添加什么字符只会使得数值更加大于k
             */
            if (digit > k) {
                return -1;
            }

            if (value == 0) {
                /**
                 * 当前字符作为一个新子串的首个字符
                 */
                value = digit;
            } else {
                if (value * 10 + digit <= k) {
                    /**
                     * 将当前字符追加在已有子串后
                     */
                    value = value * 10 + digit;
                } else {
                    /**
                     * 对已有子串进行分割，当前字符作为一个新子串的首个字符
                     */
                    result++;
                    value = digit;
                }
            }
        }
        return result;
    }
}
