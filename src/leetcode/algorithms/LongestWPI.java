package leetcode.algorithms;

/**
 * Description: 1124. Longest Well-Performing Interval
 *
 * @author Baltan
 * @date 2019-07-30 17:20
 */
public class LongestWPI {
    public static void main(String[] args) {
        int[] hours1 = {9, 9, 6, 0, 6, 6, 9};
        System.out.println(longestWPI(hours1));

        int[] hours2 =
                {12, 4, 7, 7, 15, 3, 7, 3, 9, 7, 5, 13, 10, 3, 3, 11, 6, 0, 3, 3, 13, 10, 15, 11, 12, 12, 7,
                        11, 1, 11, 14, 11, 3, 1, 8, 4, 2, 4, 2, 15, 9, 7, 3, 13, 10, 5, 10, 0, 15, 13, 13, 4,
                        2, 3, 12, 3, 0, 0, 7, 8, 11, 0, 1, 14, 12, 15, 8, 0, 10, 15, 2, 1, 12, 15, 13, 14, 9,
                        7, 9, 3, 5, 14, 3, 7, 0, 12, 9, 14, 4, 5, 4, 0, 7, 3, 0, 3, 9, 14, 13, 2, 6, 7, 13, 1,
                        1, 5, 5, 6, 1, 11, 14, 13, 13, 14, 9, 3, 4, 11, 0, 9, 14, 8, 0, 10, 0, 6, 5, 7, 0, 1,
                        14, 4, 8, 7, 5, 9, 15, 12, 2, 7, 12, 12, 1, 9, 2, 9, 13, 11, 8, 7, 9, 9, 4, 12, 1, 6,
                        4, 3, 10, 1, 8, 15, 13, 5, 4, 15, 4, 13, 13, 2, 5, 5, 5, 10, 7, 2, 14, 5, 7, 11, 4, 6,
                        14, 6, 8, 12, 12, 2, 10, 15, 8, 11, 10, 13, 9, 0, 6, 10, 14, 3, 5, 4, 9, 1, 7, 5, 13,
                        11, 14, 9, 8, 2, 1, 15, 9, 3, 3, 3, 14, 0, 8, 0, 15, 1, 1, 13, 9, 1, 9, 5, 2, 15, 0,
                        7, 5, 15, 10, 5, 6, 11, 7, 15, 4, 4, 6, 13, 8, 7, 5, 5, 7, 15, 9, 0, 5, 12, 8, 13, 14,
                        3, 10, 8, 1, 4, 10, 15, 14, 10, 11, 15, 7, 4, 10, 6, 14, 10, 9, 7, 5, 14, 15, 0, 0,
                        13, 8, 11, 6, 13, 8, 4, 11, 15, 15, 6, 9, 9, 1, 3, 6, 2, 3, 12, 14, 1, 15, 4, 8, 5, 9,
                        4, 13, 9, 5, 6, 14, 9, 7, 5, 6, 1, 8, 4, 15, 14, 13, 7, 9, 11, 11, 14, 11, 1, 7, 11,
                        8, 13, 5, 13, 3, 7, 12, 15, 10, 7, 1, 3, 12, 11, 9, 0, 4, 13, 3, 4, 11, 4, 9, 4, 11,
                        12, 5, 3, 10, 14, 10, 14, 6, 13, 0, 4, 14, 8, 6, 1, 4, 6, 10, 15, 5, 3, 13, 13, 13,
                        15, 9, 11, 2, 7, 3, 14, 2, 11, 14, 13, 8, 3, 4, 1, 14, 12, 14, 1, 15, 5, 9, 2, 3, 11,
                        9, 8, 4, 3, 8, 3, 13, 8, 2, 13, 14, 14, 6, 11, 6, 10, 9, 8, 10, 11, 15, 15, 13, 7, 13,
                        7, 0, 8, 5, 2, 9, 0, 4, 1, 12, 13, 1, 9, 9, 7, 1, 11, 13, 2, 4, 4, 9, 0, 6, 7, 7, 11,
                        11, 1, 1, 12, 3, 9, 13, 12, 2, 13, 4, 12, 0, 1, 10, 6, 13, 5, 7, 7, 1, 0, 13, 10, 4,
                        8, 3, 12, 6, 9, 3, 6, 13, 7, 12, 5, 14, 15, 4, 11, 7, 4, 11, 0, 5, 12, 15, 4, 15, 1,
                        7, 14, 6, 4, 6, 8, 15, 2, 6, 6, 14, 15, 1, 14, 2, 3, 4, 3, 15, 0, 9, 6, 12, 15, 3, 15,
                        11, 2, 3, 2, 2, 3, 13, 12, 12, 2, 2, 3, 1, 9, 7, 8, 3, 1, 8, 14, 7, 6, 2, 13, 4, 5, 4,
                        8, 9, 7, 0, 4, 6, 12, 3, 6, 10, 12, 11, 1, 0, 11, 14, 14, 0, 8, 10, 2, 6, 9, 8, 12, 2,
                        13, 6, 15, 6, 2, 11, 0, 3, 14, 3, 12, 0, 5, 8, 10, 5, 9, 13, 8, 4, 15, 4, 1, 2, 9, 12,
                        14, 15, 10, 14, 0, 9, 15, 6, 13, 8, 1, 3, 11, 15, 15, 1, 14, 15, 12, 12, 12, 6, 12,
                        15, 6, 4, 8, 1, 15, 4, 12, 0, 6, 10, 11, 9, 8, 0, 10, 5, 13, 15, 7, 11, 6, 8, 14, 12,
                        0, 6, 9, 12, 15, 10, 7, 4, 2, 2, 15, 12, 4, 13, 10, 13, 15, 12, 1, 10, 1, 7, 8, 2, 6,
                        2, 12, 7, 4, 11, 8, 13, 11, 8, 14, 5, 6, 12, 15, 1, 8, 2, 2, 10, 13, 8, 2, 15, 11, 5,
                        1, 9, 14, 10, 9, 13, 5, 0, 12, 6, 10, 8, 12, 10, 5, 0, 0, 7, 14, 14, 13, 2, 11, 0, 10,
                        11, 4, 7, 7, 1, 5, 1, 6, 8, 11, 4, 7, 12, 9, 14, 6, 0, 14, 1, 5, 4, 15, 6, 5, 12, 12,
                        8, 0, 9, 15, 9, 2, 13, 4, 10, 6, 9, 14, 13, 5, 1, 8, 4, 11, 0, 12, 6, 14, 7, 14, 4,
                        15, 10, 15, 6, 10, 4, 5, 2, 5, 0, 4, 2, 4, 3, 10, 6, 7, 2, 11, 1, 0, 13, 14, 2, 11, 8,
                        14, 15, 10, 2, 8, 6, 15, 4, 14, 5, 3, 3, 4, 13, 3, 0, 4, 12, 4, 4, 0, 12, 13, 1, 10,
                        15, 12, 0, 8, 7, 14, 9, 11, 11, 4, 3, 10, 1, 11, 12, 11, 6, 5, 1, 9, 9, 12, 12, 12,
                        11, 15, 10, 8, 11, 8, 1, 12, 14, 0, 10, 13, 10, 7, 6, 10, 9, 14, 5, 9, 10, 3, 4, 2, 0,
                        14, 1, 10, 10, 0, 14, 1, 9, 7, 15, 13, 13, 2, 3, 6, 8, 3, 12, 4, 11, 1, 4, 3, 12, 13,
                        3, 5, 5, 6, 14, 3, 5, 2, 10, 4, 11, 15, 3, 7, 10, 10, 7, 2, 8, 10, 5, 12, 10, 14, 1,
                        1, 4, 12, 3, 9, 15, 4, 12, 10, 4, 14, 11, 12, 14, 4, 3, 13, 14, 0, 10, 14, 13, 2, 8,
                        0, 6, 4, 2, 6, 3, 5, 2, 12, 4, 1, 5, 4, 1, 0, 12, 4, 3, 8, 7, 3, 12, 0, 15, 13, 10,
                        13, 10, 8, 13, 13, 14, 10, 14, 0, 5, 11};
        System.out.println(longestWPI(hours2));
    }

    public static int longestWPI(int[] hours) {
        int result = 0;
        int length = hours.length;
        int[] prefixSum = new int[length + 1];
        /**
         * 若某一天工作时间大于8小时记为1，否则记为-1，
         * 前缀和记录到第i天为止，"劳累的天数"比"不劳累的天数"多的天数，记录在prefixSum[i],
         * 若prefixSum[i]-prefixSum[j]为正，说明i-j（不含i）这些天中，劳累的天数"严格大于"不劳累的天数"
         */
        for (int i = 0; i < length; i++) {
            hours[i] = hours[i] > 8 ? 1 : -1;
            prefixSum[i + 1] = prefixSum[i] + hours[i];
        }
        /**
         * 从最长的区间开始判定，如果符合题意，直接返回这段时间的天数即可，
         * 否则将区间天数减1，继续判定
         */
        for (int i = length; i > 0; i--) {
            for (int j = 0; j <= length - i; j++) {
                if (prefixSum[j + i] - prefixSum[j] > 0) {
                    return i;
                }
            }
        }
        return result;
    }
}
