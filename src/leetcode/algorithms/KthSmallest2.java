package leetcode.algorithms;

/**
 * Description: 1439. Find the Kth Smallest Sum of a Matrix With Sorted Rows
 *
 * @author Baltan
 * @date 2023/3/22 13:47
 */
public class KthSmallest2 {
    public static void main(String[] args) {
        System.out.println(kthSmallest(new int[][]{{1, 3, 11}, {2, 4, 6}}, 5));
        System.out.println(kthSmallest(new int[][]{{1, 3, 11}, {2, 4, 6}}, 9));
        System.out.println(kthSmallest(new int[][]{{1, 10, 10}, {1, 4, 5}, {2, 3, 6}}, 7));
        System.out.println(kthSmallest(new int[][]{{1, 1, 10}, {2, 2, 9}}, 7));
        System.out.println(kthSmallest(new int[][]{{28, 28, 63, 108, 119, 173, 178, 179, 187, 246, 373, 440, 470, 501, 551, 592, 763, 832, 913}, {111, 131, 148, 220, 225, 255, 270, 363, 428, 478, 602, 633, 657, 666, 682, 775, 810, 906, 948}, {14, 101, 263, 279, 311, 313, 316, 316, 393, 397, 423, 483, 539, 763, 772, 830, 911, 963, 966}, {19, 30, 163, 178, 251, 257, 264, 268, 531, 606, 735, 820, 821, 824, 828, 858, 924, 986, 989}, {54, 56, 149, 184, 205, 274, 407, 423, 489, 508, 565, 582, 689, 722, 826, 950, 961, 987, 992}, {3, 4, 52, 84, 108, 241, 351, 357, 370, 544, 665, 679, 750, 785, 813, 876, 878, 881, 955}, {58, 75, 85, 91, 189, 324, 338, 504, 518, 593, 606, 663, 663, 665, 722, 754, 838, 842, 920}, {7, 8, 53, 74, 134, 137, 157, 231, 296, 540, 558, 559, 680, 719, 757, 786, 886, 925, 942}, {71, 89, 108, 181, 217, 545, 561, 598, 604, 701, 795, 828, 891, 894, 909, 924, 952, 959, 993}, {135, 176, 185, 195, 208, 217, 252, 310, 324, 368, 533, 572, 611, 642, 650, 719, 772, 926, 942}, {43, 54, 63, 104, 155, 204, 224, 250, 336, 392, 506, 536, 545, 718, 732, 854, 909, 947, 967}, {33, 37, 239, 292, 333, 356, 431, 473, 478, 595, 651, 657, 707, 730, 763, 783, 849, 881, 916}, {6, 18, 21, 141, 191, 197, 282, 320, 361, 398, 413, 461, 477, 503, 541, 600, 636, 681, 873}, {63, 115, 156, 227, 270, 297, 303, 324, 493, 524, 567, 703, 795, 812, 899, 904, 926, 928, 940}, {53, 60, 75, 249, 259, 344, 415, 419, 421, 432, 528, 662, 693, 731, 738, 766, 849, 872, 901}, {32, 65, 137, 179, 238, 243, 259, 278, 302, 507, 682, 707, 718, 750, 757, 783, 820, 841, 957}, {94, 164, 166, 198, 230, 255, 302, 461, 585, 613, 615, 628, 630, 757, 773, 857, 877, 984, 991}, {58, 78, 84, 87, 91, 262, 281, 348, 367, 389, 532, 533, 671, 748, 791, 811, 837, 977, 979}, {112, 165, 281, 330, 331, 519, 532, 543, 548, 602, 615, 673, 795, 818, 851, 867, 884, 908, 977}, {14, 47, 58, 139, 178, 182, 247, 247, 414, 429, 454, 461, 530, 552, 618, 642, 801, 830, 997}, {12, 39, 105, 147, 163, 229, 263, 401, 456, 499, 592, 616, 708, 712, 744, 753, 881, 888, 925}, {20, 235, 264, 277, 291, 367, 386, 390, 482, 488, 585, 605, 736, 756, 872, 883, 917, 923, 957}}, 68));
    }

    /**
     * 参考：<a href="https://leetcode.cn/problems/find-the-kth-smallest-sum-of-a-matrix-with-sorted-rows/solutions/1208311/java-qing-xi-liang-chong-jie-fa-1bao-li-vtu4n/"></a>
     *
     * @param mat
     * @param k
     * @return
     */
    public static int kthSmallest(int[][] mat, int k) {
        int rows = mat.length;
        int cols = mat[0].length;
        /**
         * 所有数组和的最小值
         */
        int lo = 0;
        /**
         * 所有数组和的最大值
         */
        int hi = 0;
        /**
         * 计算所有数组的最小值和最大值
         */
        for (int i = 0; i < rows; i++) {
            lo += mat[i][0];
            hi += mat[i][cols - 1];
        }
        /**
         * 初始化数组和为可能的最小值
         */
        int sum = lo;
        /**
         * 二分查找第k个最小数组和
         */
        while (lo < hi) {
            int mid = (lo + hi + 1) / 2;
            /**
             * 小于mid的数组和的个数
             */
            int count = dfs(mat, rows, cols, mid, sum, 0, k);

            if (count >= k) {
                hi = mid - 1;
            } else {
                lo = mid;
            }
        }
        return lo;
    }

    /**
     * 计算小于mid的数组和的个数
     *
     * @param mat
     * @param rows
     * @param cols
     * @param mid
     * @param sum
     * @param rowIndex
     * @param k
     * @return
     */
    public static int dfs(int[][] mat, int rows, int cols, int mid, int sum, int rowIndex, int k) {
        /**
         * 只有一种情况，就是没有数字可加
         */
        if (rowIndex == rows) {
            return 1;
        }
        int count = 0;

        for (int i = 0; i < cols; i++) {
            /**
             * mat[rowIndex][i]之后的元素不小于mat[rowIndex][i]，加上sum后肯定也是大于等于mid，不用继续计算
             */
            if (sum - mat[rowIndex][0] + mat[rowIndex][i] >= mid) {
                break;
            }
            count += dfs(mat, rows, cols, mid, sum - mat[rowIndex][0] + mat[rowIndex][i], rowIndex + 1, k);
            /**
             * 已经得到不少于k个数组和小于mid，而题目所求为第k个最小数组和，不用继续计算
             */
            if (count >= k) {
                break;
            }
        }
        return count;
    }
}
