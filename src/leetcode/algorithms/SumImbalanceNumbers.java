package leetcode.algorithms;

/**
 * Description: 2763. Sum of Imbalance Numbers of All Subarrays
 *
 * @author Baltan
 * @date 2023/7/17 22:56
 */
public class SumImbalanceNumbers {
    public static void main(String[] args) {
        System.out.println(sumImbalanceNumbers(new int[]{2, 3, 1, 4}));
        System.out.println(sumImbalanceNumbers(new int[]{1, 3, 3, 3, 5}));
        System.out.println(sumImbalanceNumbers(new int[]{}));
    }

    /**
     * 参考：<a href="https://leetcode.cn/problems/sum-of-imbalance-numbers-of-all-subarrays/solutions/2327214/bao-li-mei-ju-pythonjavacgo-by-endlessch-2r7p/"></a>
     *
     * @param nums
     * @return
     */
    public static int sumImbalanceNumbers(int[] nums) {
        int result = 0;
        int length = nums.length;

        for (int i = 0; i < length; i++) {
            /**
             * isVisited[x]表示以nums[i]为左端点的子数组中是否出现过数字x，根据题意，x∈[1,1000]
             */
            boolean[] isVisited = new boolean[1002];
            isVisited[nums[i]] = true;
            /**
             * 以nums[i]为左端点的子数组中的不平衡数字
             */
            int count = 0;

            for (int j = i + 1; j < length; j++) {
                /**
                 * 1、如果数字nums[j]在子数组中已经出现过，则nums[j]不会改变不平衡数字
                 * 2、如果数字nums[j]在子数组中没有出现过
                 *      1、如果数字nums[j]-1和数字nums[j]+1都没有出现过
                 *          1、如果存在数字x和y，满足nums[j]-x>1和y-nums[j]>1，则子数组中加入nums[j]后，会使得不平衡数字加2，即x和
                 *          nums[j]、nums[j]和y，同时会使得不平衡数字减1，即x和y，最终使得不平衡数字加1
                 *          2、如果只存在数字x，满足nums[j]-x>1，则子数组中加入nums[j]后，会使得不平衡数字加1，即x和nums[j]
                 *          3、如果只存在数字y，满足y-nums[j]>1，则子数组中加入nums[j]后，会使得不平衡数字加1，即nums[j]和y
                 *      2、如果只出现过数字nums[j]-1
                 *          1、如果存在数字y，满足y-nums[j]>1，则子数组中加入nums[j]后，会使得不平衡数字加1，即nums[j]和y，同时会使
                 *          得不平衡数字减1，即nums[j]-1和y，最终使得不平衡数字不变
                 *          2、因为nums[j]-1和nums[j]之差不大于1，所以不需要考虑子数组中小于nums[j]的数字
                 *      3、如果只出现过数字nums[j]+1
                 *          1、如果存在数字x，满足nums[j]-x>1，则子数组中加入nums[j]后，会使得不平衡数字加1，即x和nums[j]，同时会使
                 *          得不平衡数字减1，即x和nums[j]+1，最终使得不平衡数字不变
                 *          2、因为nums[j]和nums[j]+1之差不大于1，所以不需要考虑子数组中大于nums[j]的数字
                 *      4、如果数字nums[j]-1和数字nums[j]+1都出现过
                 *          1、会使得不平衡数字减1，即nums[j]-1和nums[j]+1
                 * 综上，如果数字nums[j]在子数组中没有出现过并且数字nums[j]-1和数字nums[j]+1都没有出现过，会使得不平衡数字加1；如果数字
                 * nums[j]在子数组中没有出现过并且数字nums[j]-1和数字nums[j]+1都出现过，会使得不平衡数字减1
                 */
                if (!isVisited[nums[j]]) {
                    if (!isVisited[nums[j] - 1] && !isVisited[nums[j] + 1]) {
                        count++;
                    } else if (isVisited[nums[j] - 1] && isVisited[nums[j] + 1]) {
                        count--;
                    }
                }
                /**
                 * 累计以nums[i]为左端点的子数组中的不平衡数字
                 */
                result += count;
                isVisited[nums[j]] = true;
            }
        }
        return result;
    }
}
