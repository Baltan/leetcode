package leetcode.algorithms;

import java.util.*;

/**
 * Description: LCP 13. 寻宝
 *
 * @author Baltan
 * @date 2020-07-29 08:32
 */
public class MinimalSteps {
    private static int result;
    private static int pathDistance;

    public static void main(String[] args) {
        System.out.println(minimalSteps(
                new String[]{"......", "M....M", ".M#...", "....M.", "##.TM.", "...O..", ".S##O.", "M#..M.",
                        "#....."}));
        System.out.println(minimalSteps(new String[]{"##TOO#O#", "OO##O.S#", "###.O###", "#..O#O##"}));
        System.out.println(minimalSteps(new String[]{"S#O", "M..", "M.T"}));
        System.out.println(minimalSteps(new String[]{"S#O", "M.#", "M.T"}));
        System.out.println(minimalSteps(new String[]{"S#O", "M.T", "M.."}));
        System.out.println(minimalSteps(new String[]{
                "......#...............#.....................#.................#......#....#.#............." +
                        "......",
                "......#.........#......#.....O..#..................#............#........M..##............" +
                        "......",
                "#.........#............#...#......#............................#...#...............##....#" +
                        "......",
                ".#..#.#..#.........#........................#......#..............##......................" +
                        ".....#",
                "....#.....#......#.............##..........#..........#............................O......" +
                        "......",
                "...........#..#...#......................#....#....#.................#...................." +
                        "......",
                "......................#..#.....O....#....#.............................O.......#..##.....#" +
                        "......",
                "###...##.........#....#...O........................#.................#..##..#............." +
                        ".M#...",
                "......................#....#....#..........#.#.#....#....#.....#......##..........#......." +
                        "...#..",
                ".#.#..#....#.............#............#...........#...#.......M.............#..........#.." +
                        ".##...",
                ".........#..#...#.......#......................#......#..................#.#............." +
                        ".#.....",
                "..........#...#.....................#...........#....#....#....##....#......#..........#.." +
                        "......",
                ".#.....................#..............#......#.#....##.......#....#......#..#............#" +
                        "......",
                "........#...#.##........#.#...O...........#......#....#......O#...#.......#...#.##....#.." +
                        ".#.#...",
                "......#..............#.............#......#.#........................#.........M..##...#.." +
                        "...#..",
                ".#..#........#................#......#...##.................#..#.##.#.....#........#.....#" +
                        "..#...",
                "..#....#..#..........#.......##..#......................#..#.##.#.....#..................." +
                        "......",
                "..#...#....M##................#.........#...#......................................#.#...." +
                        "......",
                "#...........#...............#.............#.............#..#....##.#......................" +
                        "......",
                ".....#.O..#....................#..#.#................#............#.......#..............." +
                        ".#.##.",
                "...##..............#...#............#.#.........#.......................#...###.........." +
                        ".#.#...",
                "#..##.....#........#...#..........#...#........#......#....#......##...........#..#......" +
                        ".O.....",
                "....#..........#.......#......#......#..#....O..............#.......#.....#.....MO.#....#." +
                        "......",
                ".##..........#....###..#..................#..O..#......#.................................." +
                        "....#.",
                ".....#........#...#...................#..#...####.........#.#..............##.......O....." +
                        "......",
                ".#............#......#..........#................###..##....#....#......#..#...#......#..#" +
                        ".#....",
                ".##....#..#.#....#...........................#.........#..#......#.........#.....#.#....M#" +
                        "......",
                ".....#.#...............#......#.......##.....#.............#.#.#.##.....................#" +
                        ".#.#...",
                ".............#....#..........##....#.......#........#.......##........O........#........#." +
                        ".....M",
                ".#...............#.....#.....#......#........#....#..#...##.##..........#....O......#....." +
                        "......",
                ".........#...##.O...............#..........................#.............................." +
                        "..#...",
                "........#....##..#....................#.......#.#...#.................#.#.........##......" +
                        "......",
                "...............#..........#.............#...............#...#.....#.......#..............." +
                        "......",
                "....#..............................#.....#...#......#..........#...........#............." +
                        ".#...#.",
                "..O...............#........#......#.#........#.#.........#...............#..#.#.#........." +
                        "....#.",
                "..#............#........................#.#..#...##.......#....##..........#.....#.....#.." +
                        "....#.",
                "...#..#..........#...#......#..#.##.......................O....#...............#......#..#" +
                        "......",
                "..........##.....#........#..........#..#.............#....................#.......#......" +
                        "......",
                ".........#......#....#.........................#...#.....#..........#..#.....#....#....##." +
                        ".....#",
                "....##......#.#................#.#.....#.##.............#....#..................#...#...." +
                        ".#.....",
                "..#........#.#.................#.........#..........#............#.............#......##.." +
                        "......",
                "............#....#......#....#.#.......#..............#......#.......#.........#.........." +
                        "......",
                ".........##....#................#.#..#............#.....#......#........................." +
                        ".#.##..",
                "...#..#......####..#......#.#.#..#.....#...........#........#..........#..........M#.M...." +
                        "..##..",
                "...O....#........#.......#........#.#................#..#................#................" +
                        "..#...",
                "..........#..#...............#..#........#.......#....................#..................." +
                        "......",
                "..........##.......#..#.##...#...##....#.#..............#.......#........................" +
                        ".#.....",
                "...........................#...#......................#........#...#..#.....#..#.#.......#" +
                        "......",
                "................................#......................#.#.#.........#..........#........." +
                        "...#.#",
                "#..#.........#.....................................#........#..#....................#...." +
                        ".#....#",
                "..#...#.................#.##......#..........#.................#....#...#................." +
                        "......",
                ".......#.......#......#...#.#..................................#........#................." +
                        "......",
                ".#...........#...........#...#............##.#......M................#...............#...." +
                        "......",
                "............................#.....#...#..............#................#..#....#...T.....#." +
                        "....#.",
                ".#....###....##..........#................................#..............#...........#...#" +
                        "......",
                "#..#..#.............#.....#...................#........#.......#...#......................" +
                        ".....#",
                "......#..............#.............#...............#.#..................#.....O..........." +
                        ".....#",
                "........#................................#.#.#....#..#..........#..................#...#.." +
                        "......",
                "..................#...#...........#.........#.............##..........#.#.....#....#....." +
                        ".#....#",
                "..#..#.##..#...............#.........#..#...##...M..#..##...#....#O...............#.....#." +
                        "...##.",
                "##..#...#...........#.....#.......#.....#M#.#........#...#..........#.......#..#..#......." +
                        "......",
                "...................................#....##.........#.#.#...............#..........#...#O#." +
                        "......",
                "....#...#..#..............................#...........#.#............#..#....#..#...#.#..." +
                        "......",
                "..#.............#....#..##...#........................#.....#.##......#.............#...." +
                        ".#.....",
                "...........#...#........#....#...#.............#....#.........#..........#........#......." +
                        "......",
                "#.....#......#....#..#....#..#.............................#.............#................" +
                        "......",
                ".......#......#................##..........#....#.......#....#..........................." +
                        ".#..#.#",
                "....................................#.............#...#.....#....#..#...#...........#....." +
                        "....#.",
                "....#.............##.#.......#..#.#..#...#.......#...#..........#........................." +
                        ".##..#",
                ".......##........###....####............#.#.....................#.....#....#.............." +
                        "...#.#",
                "....#.....#...##......#........#....#.....#.....#..#........#...#.....#..........#...#...." +
                        "......",
                "#.....#......#.............#....#..........#......................#.#.....#..M......#....." +
                        "..#...",
                "...............#..O.#..#..#......#......#......#.................#.......#......##......." +
                        ".#.....",
                "..##.....#.#........#.......#.#......#.....#....#......#...##.#....................#.#...." +
                        "......",
                ".##........#...#...............#...#.........#...#...O....#.......#.......##.#..........#." +
                        "...#..",
                "...............#..................#......................................................." +
                        ".#....",
                "#..............#..........#.....................#....................#...........#........" +
                        "..#...",
                "..#....#........#...........#........#.....#.............#.#.............#.......#.#..##." +
                        ".#.#...",
                "....#..............S......#.........#....#..#.#........#..#....##...........##....#......." +
                        ".#....",
                ".............#.............#.......#...#......................................#..........." +
                        ".#.###",
                ".#........#.#..#..#..##.....#......#......................#....#.................#......." +
                        ".#.....",
                "..................#...........#.....##.......##..#........................#........##..O.." +
                        "...#..",
                "##.....##....#.....#...#..#.....#..........................#...#.#...................#..#." +
                        "......",
                "..#...............#.....#.......#...#.......#...#.##...........#......#...#......##....O.." +
                        ".....#",
                ".#...................#...............#....#........#..........#.............#..........#." +
                        ".#.....",
                "............#.........#.......#...........................#......#......#.......#.......#." +
                        "...#.."}));
    }

    public static int minimalSteps(String[] maze) {
        result = Integer.MAX_VALUE;
        int rows = maze.length;
        int cols = maze[0].length();
        List<int[]> mList = new ArrayList<>();
        List<int[]> oList = new ArrayList<>();
        int[] start = new int[2];
        int[] end = new int[2];

        for (int i = 0; i < rows; i++) {
            char[] charArray = maze[i].toCharArray();

            for (int j = 0; j < cols; j++) {
                char c = charArray[j];

                if (c == 'S') {
                    start[0] = i;
                    start[1] = j;
                } else if (c == 'T') {
                    end[0] = i;
                    end[1] = j;
                } else if (c == 'M') {
                    mList.add(new int[]{i, j});
                } else if (c == 'O') {
                    oList.add(new int[]{i, j});
                }
            }
        }

        int mCount = mList.size();
        int oCount = oList.size();
        int[] smDistances = new int[mCount];
        int[][] mmDistances = new int[mCount][mCount];
        int[] mtDistances = new int[mCount];

        for (int i = 0; i < mCount; i++) {
            smDistances[i] = Integer.MAX_VALUE;

            for (int j = 0; j < oCount; j++) {
                int soDistance = getDistance(start, oList.get(j), maze);
                int omDistance = getDistance(oList.get(j), mList.get(i), maze);

                if (soDistance != Integer.MAX_VALUE && omDistance != Integer.MAX_VALUE) {
                    smDistances[i] = Math.min(smDistances[i], soDistance + omDistance);
                }
            }
        }

        for (int i = 0; i < mCount; i++) {
            for (int j = i + 1; j < mCount; j++) {
                mmDistances[i][j] = Integer.MAX_VALUE;

                for (int k = 0; k < oCount; k++) {
                    int moDistance = getDistance(mList.get(i), oList.get(k), maze);
                    int omDistance = getDistance(oList.get(k), mList.get(j), maze);

                    if (moDistance != Integer.MAX_VALUE && omDistance != Integer.MAX_VALUE) {
                        mmDistances[i][j] = Math.min(mmDistances[i][j], moDistance + omDistance);
                    }
                }
            }
        }

        for (int i = 0; i < mCount; i++) {
            mtDistances[i] = Integer.MAX_VALUE;

            for (int j = 0; j < oCount; j++) {
                int mtDistance = getDistance(mList.get(i), end, maze);

                if (mtDistance != Integer.MAX_VALUE) {
                    mtDistances[i] = Math.min(mtDistances[i], mtDistance);
                }
            }
        }

        if (mCount == 0) {
            result = getDistance(start, end, maze);
        }
        getDistance(smDistances, mmDistances, mtDistances);
        return result == Integer.MAX_VALUE ? -1 : result;
    }

    public static int getDistance(int[] from, int[] to, String[] maze) {
        int rows = maze.length;
        int cols = maze[0].length();
        Queue<int[]> queue = new LinkedList<>();
        int[][] directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        boolean[][] isVisited = new boolean[rows][cols];
        int distance = 0;
        queue.offer(from);
        isVisited[from[0]][from[1]] = true;

        while (!queue.isEmpty()) {
            int size = queue.size();

            for (int i = 0; i < size; i++) {
                int[] position = queue.poll();

                if (position[0] == to[0] && position[1] == to[1]) {
                    return distance;
                }

                for (int[] direction : directions) {
                    int nextRow = position[0] + direction[0];
                    int nextCol = position[1] + direction[1];

                    if (nextRow >= 0 && nextRow < rows && nextCol >= 0 && nextCol < cols &&
                            maze[nextRow].charAt(nextCol) != '#' && !isVisited[nextRow][nextCol]) {
                        queue.offer(new int[]{nextRow, nextCol});
                        isVisited[nextRow][nextCol] = true;
                    }
                }
            }
            distance++;
        }
        return Integer.MAX_VALUE;
    }

    public static void getDistance(int[] smDistances, int[][] mmDistances, int[] mtDistances) {
        int mCount = mmDistances.length;

        for (int i = 0; i < mCount; i++) {
            if (smDistances[i] == Integer.MAX_VALUE) {
                continue;
            }
            pathDistance = smDistances[i];
            boolean[] isVisited = new boolean[mCount];
            isVisited[i] = true;
            dfs(mmDistances, mtDistances, isVisited, i);
        }
    }

    public static void dfs(int[][] mmDistances, int[] mtDistances, boolean[] isVisited, int from) {
        int mCount = mmDistances.length;
        boolean noVisited = false;

        for (int i = 0; i < mCount; i++) {
            if (!isVisited[i]) {
                noVisited = true;
                break;
            }
        }

        if (!noVisited) {
            if (mtDistances[from] == Integer.MAX_VALUE) {
                return;
            } else {
                pathDistance += mtDistances[from];
                result = Math.min(result, pathDistance);
                pathDistance -= mtDistances[from];
                return;
            }
        }

        for (int i = 0; i < mCount; i++) {
            if (!isVisited[i]) {
                int min = Math.min(from, i);
                int max = Math.max(from, i);

                if (mmDistances[min][max] == Integer.MAX_VALUE) {
                    continue;
                }
                pathDistance += mmDistances[min][max];
                isVisited[i] = true;
                dfs(mmDistances, mtDistances, isVisited, i);
                isVisited[i] = false;
                pathDistance -= mmDistances[min][max];
            }
        }
    }
}
