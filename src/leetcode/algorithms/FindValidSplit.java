package leetcode.algorithms;

import java.util.*;

/**
 * Description: 2584. Split the Array to Make Coprime Products
 *
 * @author Baltan
 * @date 2023/3/5 18:32
 */
public class FindValidSplit {
    public static void main(String[] args) {
        System.out.println(findValidSplit(new int[]{907133, 988909, 324811, 802159, 555941, 408677, 898769, 785503, 341557, 187367, 230819, 500861, 575723, 907133, 646157, 857809, 52051, 953053, 341203, 82007, 62483, 120551, 72953, 231131, 463459, 871837, 208529, 492431, 626783, 756251, 636533, 185077, 999499, 821209, 38791, 312241, 961243, 390889, 927167, 385741, 195931, 200579, 496333, 524519, 120503, 81023, 999067, 228409, 5521, 185873, 126317, 46877, 283159, 318817, 492647, 796177, 314339, 744221, 953497, 362237, 651293, 246241, 295961, 791789, 549707, 867281, 864917, 947659, 117563, 369191, 144409, 710839, 879917, 994393, 991981, 632297, 19087, 986047, 49993, 962909, 260461, 513277, 443543, 757151, 703643, 144791, 950269, 972443, 819167, 973003, 657929, 519881, 596851, 411083, 340541, 855061, 863153, 944777, 862219, 760241, 604013, 106277, 470881, 839723, 136207, 306529, 498691, 72379, 353117, 165709, 46073, 918067, 381019, 615829, 270191, 840241, 883889, 292709, 645703, 960667, 301363, 134681, 426773, 557423, 66959, 27073, 209533, 314581, 217033, 143719, 6737, 671161, 916703, 412831, 844841, 621619, 616897, 711967, 480503, 8273, 102217, 65551, 396533, 71503, 66047, 220009, 153877, 457739, 717271, 879169, 270973, 294241, 630901, 775517, 36263, 547537, 21017, 400753, 954131, 569081, 645041, 369829, 740429, 663599, 24109, 949733, 233683, 33119, 42577, 505339, 394319, 661477, 628363, 723997, 864679, 681521, 31319, 950617, 46489, 176383, 269183, 883237, 861317, 186917, 749069, 464383, 67421, 145007, 840547, 162209, 695081, 297457, 981187, 860059, 451439, 386437, 418981, 898769, 406037, 803323, 737629, 909457, 239633, 724459, 221401, 188249, 205103, 87629, 733301, 654107, 673441, 825733, 691309, 519793, 739943, 387161, 527809, 34591, 401917, 128473, 785119, 619819, 718897, 26357, 678739, 928643, 802253, 564643, 423103, 666637, 440543, 682471, 23269, 532267, 714163, 210659, 898133, 634307, 951649, 995903, 313343, 617717, 43753, 261713, 595319, 175069, 42239, 117191, 109807, 354763, 993763, 166783, 624419, 159737, 260411, 748273, 95633, 309469, 781511, 878659, 849593, 942763, 60337, 628139, 677783, 491429, 666439, 835823, 278071, 153991, 136711, 785107, 970961, 494917, 498403, 149893, 278279, 897019, 114157, 396373, 378949, 540179, 201787, 91571, 402517, 708007, 193619, 7109, 277, 610417, 547499, 924403, 57077, 507803, 522959, 697453, 362753, 499361, 246607, 698239, 164173, 286289, 616027, 519373, 388277, 585199, 873569, 936521, 803449, 157427, 183959, 417581, 997991, 661547, 69457, 61141, 232217, 816427, 749641, 994769, 593387, 479431, 289033, 200639, 874009, 733639, 425813, 531203, 641761, 737251, 521897, 48821, 967951, 27953, 731893, 781523, 530539, 293329, 467399, 902507, 596341, 50599, 529933, 128099, 534607, 643439, 926507, 87337, 777353, 128813, 815869, 797077, 91199, 968333, 842393, 27827, 782371, 921749, 725861, 426073, 575957, 592157, 85487, 311183, 390491, 297023, 708371, 45533, 353629, 793229, 77893, 363373, 50497, 236461, 909863, 724807, 380207, 612259, 301843, 599759, 153371, 179999, 91079, 603011, 689441, 519647, 720257, 554959, 616877, 32099, 514529, 206341, 409733, 392267, 880421, 183247, 106871, 948139, 59357, 970787, 135929, 399491, 247711, 297317, 722977, 417479, 825161, 545863, 1493, 720829, 706883, 789527, 103867, 719143, 196159, 148303, 857723, 885893, 58967, 609619, 247943, 747763, 441713, 54559, 976957, 42433, 807217, 955693, 724117, 235967, 760499, 49747, 260023, 545161, 359633, 230743, 616169, 580577, 67231, 299749, 133051, 257489, 39439, 592853, 975427, 385531, 904777, 96847, 501719, 956051, 454547, 53813, 657017, 993253, 272191, 272477, 597803, 364393, 341681, 466913, 755071, 250057, 385897, 822893, 722977, 848119, 437273, 515351, 243587, 609313, 636059, 994583, 755567, 517457, 181919, 188491, 599591, 63197, 78367, 838399, 31033, 238151, 485081, 332699, 49481, 551933, 74929, 841097, 932413, 131111, 130513, 952087, 522757, 37879, 998623, 273457, 641863, 823829, 543617, 443749, 695809, 342791, 62141, 562901, 733793, 856901, 740423, 227651, 800897, 398549, 565769, 785947, 312799, 75611, 26339, 330103, 892097, 36791, 261451, 770183, 947743, 778409, 402049, 396733, 676493, 981241, 495799, 449773, 712219, 136373, 69197, 687433, 200171, 274679, 265579}));
        System.out.println(findValidSplit(new int[]{557663, 280817, 472963, 156253, 273349, 884803, 756869, 763183, 557663, 964357, 821411, 887849, 891133, 453379, 464279, 574373, 852749, 15031, 156253, 360169, 526159, 410203, 6101, 954851, 860599, 802573, 971693, 279173, 134243, 187367, 896953, 665011, 277747, 439441, 225683, 555143, 496303, 290317, 652033, 713311, 230107, 770047, 308323, 319607, 772907, 627217, 119311, 922463, 119311, 641131, 922463, 404773, 728417, 948281, 612373, 857707, 990589, 12739, 9127, 857963, 53113, 956003, 363397, 768613, 47981, 466027, 981569, 41597, 87149, 55021, 600883, 111953, 119083, 471871, 125641, 922463, 562577, 269069, 806999, 981073, 857707, 831587, 149351, 996461, 432457, 10903, 921091, 119083, 72671, 843289, 567323, 317003, 802129, 612373}));
        System.out.println(findValidSplit(new int[]{13879, 383651, 65843, 293087, 558091, 645329, 333049, 753197, 857341, 859181, 35831, 116471, 888163, 957331, 515777, 142787, 762779, 266111, 169987, 89083, 451699, 376837, 856927, 517277, 628423, 541231, 781423, 585877, 54647, 474809, 526387, 556817, 337817, 655643, 431447, 245279, 873739, 357817, 13879, 713681, 871901, 765169, 511211, 418007, 497111, 12517, 379343, 358811, 351643, 674677, 688747, 826349, 805031, 529051, 923833, 488603, 403703, 293087, 410087, 180137, 928637, 776453, 394187, 707159, 184013, 126079, 57149, 683653, 652541, 156671, 55817, 89083, 110569, 21851, 782329, 610733, 867151, 559067, 247381, 412147, 475273, 554759, 825413, 181243, 262321, 930283, 846233, 760841, 742619, 183473, 507641, 324179, 39887, 892709, 44293, 580691, 101347, 524983, 501577, 808217, 916339, 389297, 880699, 346877, 40841, 802667, 335693, 115879, 520703, 18773, 684889, 132911, 173309, 984757, 821101, 514103, 110059, 634331, 277493, 645431, 106487, 252157, 324949, 855419, 278497, 313409, 233921, 601021, 940001, 474809, 608633, 139361, 659713, 20123, 2857, 886129, 126923, 871303, 556817, 729607, 649631, 16921, 624997, 58543, 4391, 598877, 909971, 693793, 339491, 255851, 911249, 227611, 196159, 451499, 607337, 823717, 469141, 229529, 805019, 849131, 259943, 773681, 588641, 920743, 960419, 390883, 69697, 908321, 321721, 548003, 345773, 496897, 580691, 86629, 3529, 92401, 12689, 192343, 753197, 736721, 624497, 842321, 415231, 228611, 489631, 902903, 388099, 21767, 379013, 212207, 384509, 971759, 151, 200293, 132247, 216743, 664891, 574367, 444623, 458207, 221471, 256541, 373, 286483, 607261, 34267, 868873, 677459, 503077, 700561, 23497, 952117, 116849, 381167, 84761, 17099, 563587, 421987, 258109, 939193, 290201, 454151, 257069, 134153, 742541, 854599, 833717, 444967, 965773, 55219, 655211, 370441, 68711, 334793, 897241, 308509, 516437, 731201, 887401, 746777, 803939, 309599, 502669, 31177, 285749, 89057, 744371, 273709, 100297, 87107, 423461, 93229, 445321, 129719, 998831, 933319, 795007, 970549, 338717, 74771, 502883, 108541, 872173, 840223, 124489, 19421, 407317, 134683, 64853, 143977, 567631, 626837, 835511, 133691, 476911, 904357, 103979, 550427, 749843, 903257, 844321, 952207, 351047, 635969, 467903, 617873, 648107, 380713, 418751, 112331, 550189, 384733, 58733, 416579, 228929, 543187, 154493, 106877, 503441, 777041, 229769, 809201, 332009, 24443, 305419, 660529, 103183, 456613, 233083, 76289, 345599, 269131, 96553, 126823, 776879, 527489, 912859, 867121, 347707, 854569, 98953, 879661, 253741, 578309, 885893, 581521, 762479, 321169, 298409, 717397, 197359, 111103, 714563, 351347, 239509, 752681, 429223, 559633, 558401, 485171, 636817, 239753, 855997, 897157, 545497, 131581, 831071, 664793, 875393, 574621, 521527, 205553, 459317, 46867, 784109, 793187, 546893, 85661, 969763, 621241, 642779, 713309, 198197, 135329}));
        System.out.println(findValidSplit(new int[]{4, 7, 8, 15, 3, 5}));
        System.out.println(findValidSplit(new int[]{4, 7, 15, 8, 3, 5}));
    }

    /**
     * 参考：<a href="https://leetcode.cn/problems/split-the-array-to-make-coprime-products/solution/ben-zhi-shi-tiao-yue-you-xi-by-endlessch-8chd/"></a>
     *
     * @param nums
     * @return
     */
    public static int findValidSplit(int[] nums) {
        int result = 0;
        int length = nums.length;
        /**
         * 当nums[i]和nums[j]不互质时，这两个数必须放在同一个子数组中，pairs保存所有的(i,j)区间
         */
        List<int[]> pairs = new ArrayList<>();
        /**
         * 因数i -> 数组nums中能被i整除的第一个数字的索引
         */
        Map<Integer, Integer> leftmostMap = new HashMap<>();
        /**
         * 因数i -> 数组nums中能被i整除的最后一个数字的索引
         */
        Map<Integer, Integer> rightmostMap = new HashMap<>();

        for (int i = 0; i < length; i++) {
            /**
             * 因数1对子数组的乘积没有影响，可以忽略
             */
            if (nums[i] == 1) {
                continue;
            }
            int num = nums[i];
            /**
             * 判断数字num存在哪些因数，尽可能地只考虑j为质数的情况，所以当j>2时，自增的步长为2，令j始终为奇数
             */
            for (int j = 1; j * j <= num; j += (j <= 2 ? 1 : 2)) {
                if (num % j == 0) {
                    if (leftmostMap.containsKey(j)) {
                        /**
                         * 数字num是数组nums中最后一个能被j整除的数字
                         */
                        rightmostMap.put(j, i);
                    } else {
                        /**
                         * 数字num是数组nums中第一个能被j整除的数字
                         */
                        leftmostMap.put(j, i);
                    }
                    int k = num / j;

                    if (leftmostMap.containsKey(k)) {
                        /**
                         * 数字num是数组nums中最后一个能被k整除的数字
                         */
                        rightmostMap.put(k, i);
                    } else {
                        /**
                         * 数字num是数组nums中第一个能被k整除的数字
                         */
                        leftmostMap.put(k, i);
                    }
                }
            }
        }
        /**
         * 归集所有区间(i,j)
         */
        for (Map.Entry<Integer, Integer> entry : leftmostMap.entrySet()) {
            int factor = entry.getKey();
            int leftmost = entry.getValue();
            int rightmost = rightmostMap.getOrDefault(factor, -1);

            if (factor == 1) {
                continue;
            }

            if (leftmost < rightmost) {
                pairs.add(new int[]{leftmost, rightmost});
            }
        }
        /**
         * 将所有区间按照起始索引升序排列
         */
        Collections.sort(pairs, Comparator.comparingInt(x -> x[0]));

        for (int[] pair : pairs) {
            /**
             * 如果某个区间和分割索引存在交集，则将分割索引扩大为区间的结束索引值
             */
            if (pair[0] <= result && pair[1] > result) {
                result = pair[1];
            }
        }
        /**
         * 如果分割处为索引length-1处，说明不存在有效分割，返回-1
         */
        return result == length - 1 ? -1 : result;
    }
}
